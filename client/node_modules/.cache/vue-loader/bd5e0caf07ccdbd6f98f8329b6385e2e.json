{"remainingRequest":"D:\\2021_Project\\Nodejs\\WoodShop\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\2021_Project\\Nodejs\\WoodShop\\client\\src\\components\\miniComponents\\BaseButton.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\2021_Project\\Nodejs\\WoodShop\\client\\src\\components\\miniComponents\\BaseButton.vue","mtime":1619693947872},{"path":"D:\\2021_Project\\Nodejs\\WoodShop\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\2021_Project\\Nodejs\\WoodShop\\client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\2021_Project\\Nodejs\\WoodShop\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\2021_Project\\Nodejs\\WoodShop\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\2021_Project\\Nodejs\\WoodShop\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYnRuOmhvdmVyewogIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMXB4KTsKfQo="},{"version":3,"sources":["BaseButton.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;AACA;AACA","file":"BaseButton.vue","sourceRoot":"src/components/miniComponents","sourcesContent":["<template>\r\n  <component\r\n    :is=\"tag\"\r\n    :type=\"tag === 'button' ? nativeType : ''\"\r\n    @click=\"handleClick\"\r\n    class=\"btn\"\r\n    :class=\"classes\"\r\n  >\r\n    <span\r\n      class=\"btn-inner--icon\"\r\n      v-if=\"$slots.icon || (icon && $slots.default)\"\r\n    >\r\n      <slot name=\"icon\">\r\n        <i :class=\"icon\"></i>\r\n      </slot>\r\n    </span>\r\n    <i v-if=\"!$slots.default\" :class=\"icon\"></i>\r\n    <span\r\n      class=\"btn-inner--text\"\r\n      v-if=\"$slots.icon || (icon && $slots.default)\"\r\n    >\r\n      <slot>\r\n        {{ text }}\r\n      </slot>\r\n    </span>\r\n    <slot v-if=\"!$slots.icon && !icon\"></slot>\r\n  </component>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"basebutton\",\r\n  props: {\r\n    tag: {\r\n      type: String,\r\n      default: \"button\",\r\n      description: \"Button tag (default -> button)\",\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: \"default\",\r\n      description: \"Button type (e,g primary, danger etc)\",\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Button size lg|sm\",\r\n    },\r\n    textColor: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Button text color (e.g primary, danger etc)\",\r\n    },\r\n    nativeType: {\r\n      type: String,\r\n      default: \"button\",\r\n      description: \"Button native type (e.g submit,button etc)\",\r\n    },\r\n    icon: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Button icon\",\r\n    },\r\n    text: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Button text in case not provided via default slot\",\r\n    },\r\n    outline: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether button style is outline\",\r\n    },\r\n    rounded: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether button style is rounded\",\r\n    },\r\n    iconOnly: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether button contains only an icon\",\r\n    },\r\n    block: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether button is of block type\",\r\n    },\r\n  },\r\n  computed: {\r\n    classes() {\r\n      let btnClasses = [\r\n        { \"btn-block\": this.block },\r\n        { \"rounded-circle\": this.ruonded },\r\n        { \"btn-icon-only\": this.iconOnly },\r\n        { [`text-${this.textColor}`]: this.textColor },\r\n        { \"btn-icon\": this.icon || this.$slots.icon },\r\n        this.type && !this.outline ? `btn-${this.type}` : \"\",\r\n        this.outline ? `btn-outline-${this.type}` : \"\",\r\n      ];\r\n      if (this.size) {\r\n        btnClasses.push(`btn-${this.size}`);\r\n      }\r\n      return btnClasses;\r\n    },\r\n  },\r\n  methods: {\r\n    handleClick(evt) {\r\n      this.$emit(\"click\", evt);\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n  .btn:hover{\r\n    transform: translateY(-1px);\r\n  }\r\n</style>\r\n"]}]}